Backend Microservice (Node.js):
1.Setting up Node.js Server:
Create a Node.js project using a framework like Express.
Install necessary packages:
Code
                  npm init -y
                  npm install express passport passport-google-oauth20 mongoose dotenv

2.OAuth Authentication:
Set up Google OAuth using Passport.js.
Code:
// Implement OAuth in your server.js file
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

passport.use(new GoogleStrategy({
  clientID: GOOGLE_CLIENT_ID,
  clientSecret: GOOGLE_CLIENT_SECRET,
  callbackURL: '/auth/google/callback',
}, (accessToken, refreshToken, profile, done) => {
  // Save user to the database or perform other actions
  return done(null, profile);
}));

app.get('/auth/google', passport.authenticate('google', { scope: ['profile', 'email'] }));

app.get('/auth/google/callback', passport.authenticate('google', { failureRedirect: '/' }), (req, res) => {
  // Redirect after successful login
  res.redirect('/communication-history');
});





Communication Details:
Implement API endpoints to retrieve communication history from the database.

Code:
// Example route for getting communication history
app.get('/communication-history', (req, res) => {
  // Fetch communication history from the database
  // Return the data as JSON
  res.json({ communicationHistory: [...] });
});

Send Email using Postmarkapp.com API:
Integrate with the Postmarkapp.com API to send emails.
Code:
// Example route for sending emails
app.post('/send-email', (req, res) => {
  // Use Postmarkapp.com API to send emails
  // Record communication history in the database
  res.json({ message: 'Email sent successfully' });
});


Google OAuth Integration (Backend):
// server.js

const express = require('express');
const passport = require('passport');
const GoogleStrategy = require('passport-google-oauth20').Strategy;

const app = express();

// Configure Passport with Google OAuth strategy
passport.use(new GoogleStrategy({
  clientID: 'YOUR_GOOGLE_CLIENT_ID',
  clientSecret: 'YOUR_GOOGLE_CLIENT_SECRET',
  callbackURL: '/auth/google/callback',
},
(accessToken, refreshToken, profile, done) => {
  // Save user to the database or perform other actions
  return done(null, profile);
}));

// Initialize Passport
app.use(passport.initialize());

// Routes for Google OAuth
app.get('/auth/google',
  passport.authenticate('google', { scope: ['profile', 'email'] })
);

app.get('/auth/google/callback',
  passport.authenticate('google', { failureRedirect: '/' }),
  (req, res) => {
    // Redirect after successful login
    res.redirect('/communication-history');
  }
);

// Start the server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
  console.log(`Server is running on port ${PORT}`);
});

Postmark Integration (Backend):
// server.js

const express = require('express');
const axios = require('axios');

const app = express();

// Example Postmark API Key
const POSTMARK_API_KEY = 'YOUR_POSTMARK_API_KEY';

// Route for sending emails
app.post('/send-email', async (req, res) => {
  try {
    // Extract email data from request body
    const { to, subject, body } = req.body;

    // Postmark API endpoint for sending emails
    const postmarkEndpoint = 'https://api.postmarkapp.com/email';

    // Send email using Postmark API
    const response = await axios.post(postmarkEndpoint, {
      From: 'your-email@example.com',
      To: to,
      Subject: subject,
      HtmlBody: body,
    }, {
      headers: {
        'Content-Type': 'application/json',
        'X-Postmark-Server-Token': POSTMARK_API_KEY,
      },
    });

    // Handle response from Postmark
    console.log('Email sent:', response.data);
    res.json({ message: 'Email sent successfully' });
  } catch (error) {
    console.error('Error sending email:', error.message);
    res.status(500).json({ err
